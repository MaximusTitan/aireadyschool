import { NextResponse } from 'next/server'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
})

export async function POST(req: Request) {
  try {
    const { story, generateScenes } = await req.json()

    if (generateScenes) {
      // More specific prompt to ensure consistent formatting
      const prompt = `Break this story into exactly 4 scenes for a video storyboard. For each scene:
1. Describe the main action or event
2. Specify visual details (camera angle, lighting, setting)
3. List key elements to focus on

Story: ${story}

Follow this EXACT format for each scene (maintain the exact symbols and spacing):
Scene 1: [Main action happening] | Visual: [camera angle, lighting, setting details] | Focus: [key elements]
Scene 2: [Next key moment] | Visual: [visual details] | Focus: [key elements]
Scene 3: [Another key moment] | Visual: [visual details] | Focus: [key elements]
Scene 4: [Final/climactic moment] | Visual: [visual details] | Focus: [key elements]

Make each scene description clear and cinematic.`

      console.log("Sending prompt to GPT:", prompt);

      const completion = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ 
          role: "user", 
          content: prompt 
        }],
        temperature: 0.7,
        max_tokens: 1500,
        presence_penalty: 0.3,
        frequency_penalty: 0.3
      });

      const sceneText = completion.choices[0].message.content;
      console.log("Received scene text:", sceneText);

      if (!sceneText) {
        throw new Error('No content received from GPT');
      }

      const scenes = parseScenes(sceneText);
      console.log("Parsed scenes:", scenes);

      if (scenes.length === 0) {
        console.error("Scene parsing failed. Raw text:", sceneText);
        throw new Error('Scene parsing failed - no scenes detected');
      }

      if (scenes.length < 4) {
        console.error(`Only ${scenes.length} scenes generated. Raw text:`, sceneText);
        throw new Error(`Insufficient scenes generated (${scenes.length}/4)`);
      }

      return NextResponse.json({
        success: true,
        scenes,
        debug: {
          rawSceneText: sceneText,
          parsedSceneCount: scenes.length
        }
      });
    }

    // Modified story enhancement prompt
    const prompt = `Create a short, engaging story from the following input. The story should:
    - Be written in natural prose format (not screenplay)
    - Be descriptive and vivid but concise
    - Focus on narrative flow and emotional connection
    - Avoid technical directions or camera instructions
    - Be suitable for visual adaptation
    - Be between 200-300 words
    
    Input story: ${story}

    Write the story in a clear, engaging style that a general audience can easily follow.`;

    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
      max_tokens: 1000,
      presence_penalty: 0.2,
      frequency_penalty: 0.3
    });

    const refinedStory = completion.choices[0].message.content;

    return NextResponse.json({
      success: true,
      refinedStory
    });

  } catch (error) {
    console.error('Error in video-story-generator:', error);
    return NextResponse.json({
      error: 'Failed to process request',
      details: error instanceof Error ? error.message : 'Unknown error',
      success: false
    }, { 
      status: 500 
    });
  }
}

function parseScenes(sceneText: string) {
  const scenes = [];
  const sceneRegex = /Scene\s*(\d+)\s*:\s*([^|]+)\|\s*Visual:\s*([^|]+)\|\s*Focus:\s*([^\n]+)/g;
  let match;

  while ((match = sceneRegex.exec(sceneText)) !== null) {
    const sceneNumber = match[1];
    const description = match[2].trim();
    const visualDetails = match[3].trim();
    const focusElements = match[4].trim();

    // Updated manga-style prompt
    const imagePrompt = `Professional manga illustration of: ${description}. Scene details: ${visualDetails}. Key focus: ${focusElements}. Style: high-quality manga art, black and white anime style, detailed linework, Studio Ghibli inspired composition, dramatic shading techniques, clean ink lines, dynamic manga panel layout, expressive anime characters, classic Japanese comic aesthetics with strong inking and contrast, white background. Add: cross-hatching, speed lines for movement, dramatic camera angles, emotive facial expressions, detailed architectural backgrounds`;

    scenes.push({
      id: `scene-${sceneNumber}`,
      number: parseInt(sceneNumber),
      text: description,
      visualDetails,
      focusElements,
      imagePrompt, // Add the constructed prompt
      imageUrl: '' // Will be generated by SDXL
    });
  }

  return scenes.sort((a, b) => a.number - b.number);
}
